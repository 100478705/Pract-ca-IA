import numpy as np
import skfuzzy as skf
import matplotlib.pyplot as plt 
from MFIS_Read_Functions import *
from MFIS_Classes import *




        


def reglas (dic_fuzz, lista_reglas):
    for regla in lista_reglas:
        for setid in regla.antecedent:
            valor_fuzz = dic_fuzz[setid].memDegree
            #print ("Para el fuzzyset:", setid, " el  valor fuzzificao es : ", valor_fuzz)
            if regla.strength == -10: #metemos a cada regla el valor fuzzificao que debería tener el riesgo (el menor valor de los valores fuzzificaos)
                regla.strength = valor_fuzz
            elif valor_fuzz < regla.strength: #filtramos en el diccionario en base a los setids que haya en antecedente
                regla.strength = valor_fuzz
    return
        #print (regla.consequent, regla.strength)




def riesgos (lista_reglas, trapecio_low, trapecio_mid, trapecio_high, x):
    r_low = []
    r_mid = []
    r_high = []
    for regla in lista_reglas:
        nivel = regla.consequent
        if nivel == "Risk=LowR":
            r_low.append(regla.strength)
        elif nivel == "Risk=MediumR":
            r_mid.append(regla.strength)
        elif nivel == "Risk=HighR":
            r_high.append(regla.strength)

        
    print ("Los riesgos para esta solicitud son: Risk Low = ", np.amax(r_low), " Risk Mid = ", np.amax(r_mid), " Risk High = ", np.amax(r_high))
    
    low = np.minimum (np.amax(r_low), trapecio_low)
    mid = np.minimum (np.amax(r_mid), trapecio_mid)
    high = np.minimum (np.amax(r_high), trapecio_high)

    combo = np.maximum(low, np.maximum(mid, high))
    centroide = round(np.sum(x * combo) / np.sum(combo), 2)

    print ("el porcentaje de riesgo para esta solicitud es del" , centroide, "%")
    return




def fuzzy_app (app, dic_fuzz):
    data = app.data
    for i in range(len(data)):
        for fuzzyset in dic_fuzz.values():
            if data [i][0] == fuzzyset.var:
            
                fuzzyset.memDegree = skf.interp_membership(fuzzyset.x, fuzzyset.y, data[i][1])
                
                #print (fuzzyset.var, fuzzyset.label, fuzzyset.memDegree)
             
                #el memDegree de cada atributo es el valor fuzzificao
                
    return



lista_reglas = readRulesFile()

lista_app = readApplicationsFile()

dic_fuzz = readFuzzySetsFile('Files/InputVarSets.txt')


# Definir los límites de los trapecios
x = np.arange(0, 100, 1)
trapecio_low = skf.trapmf(x, [-20, -10, 30, 50])
trapecio_mid = skf.trapmf(x, [10, 40, 70, 90])
trapecio_high = skf.trapmf(x, [50, 70, 100, 111])


for app in lista_app:
    print ()
    print (app.appId)
    fuzzy_app(app, dic_fuzz) # tengo los valores fuzzificaos para cada fuzzyset (Age Low, Age Mid...)
    reglas(dic_fuzz, lista_reglas)
    riesgos(lista_reglas, trapecio_low, trapecio_mid, trapecio_high, x)
    lista_reglas = readRulesFile()
    print()

#dic_fuzz.printFuzzySetsDict()
